# -*- coding: utf-8 -*-
"""Web App one.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FRIlm2FsZrlRFm8yoP118aW0DCnBr3KL
"""

import streamlit as st
import numpy as np
import pickle as pkl
from sklearn.preprocessing import MinMaxScaler

# Set page config at the beginning
st.set_page_config(page_title="Heart Disease Prediction Dashboard", page_icon="⚕️", layout="centered", initial_sidebar_state="expanded")

# Load the saved model
try:
    model = pkl.load(open("final_model.p", "rb"))
except FileNotFoundError:
    st.error("Model file not found. Make sure 'final_model.p' is in the same directory.")
    st.stop()

# Function to preprocess user input
def preprocess(age, sex, cp, trestbps, restecg, chol, fbs, thalach, exang, oldpeak, slope, ca, thal):
    sex = 1 if sex == "male" else 0

    cp_dict = {"Typical angina": 0, "Atypical angina": 1, "Non-anginal pain": 2, "Asymptomatic": 3}
    cp = cp_dict.get(cp, 0)

    exang = 1 if exang == "Yes" else 0
    fbs = 1 if fbs == "Yes" else 0

    slope_dict = {
        "Upsloping: better heart rate with exercise(uncommon)": 0,
        "Flatsloping: minimal change(typical healthy heart)": 1,
        "Downsloping: signs of unhealthy heart": 2
    }
    slope = slope_dict.get(slope, 1)

    thal_dict = {
        "fixed defect: used to be defect but ok now": 6,
        "reversable defect: no proper blood movement when exercising": 7,
        "normal": 2
    }
    thal = thal_dict.get(thal, 2)

    restecg_dict = {
        "Nothing to note": 0,
        "ST-T Wave abnormality": 1,
        "Possible or definite left ventricular hypertrophy": 2
    }
    restecg = restecg_dict.get(restecg, 0)

    user_input = np.array([age, sex, cp, trestbps, restecg, chol, fbs, thalach, exang, oldpeak, slope, ca, thal]).reshape(1, -1)

    # Normalize input using the model's scaler (Ensure the model was trained with this scaler)
    scaler = MinMaxScaler()
    user_input = scaler.fit_transform(user_input)  # If possible, load the same scaler used in training

    prediction = model.predict(user_input)
    return prediction

# Webpage UI
st.markdown("<div style='background-color:pink;padding:13px'><h1 style='color:black;text-align:center;'>Heart Disease Prediction Dashboard</h1></div>", unsafe_allow_html=True)
st.subheader("by Enock Bereka")

# User input form
age = st.selectbox("Age", range(1, 121, 1))
sex = st.radio("Select Gender:", ('male', 'female'))
cp = st.selectbox("Chest Pain Type", ["Typical angina", "Atypical angina", "Non-anginal pain", "Asymptomatic"])
trestbps = st.selectbox("Resting Blood Pressure (mmHg)", range(1, 500, 1))
restecg = st.selectbox("Resting ECG Results", ["Nothing to note", "ST-T Wave abnormality", "Possible or definite left ventricular hypertrophy"])
chol = st.selectbox("Serum Cholesterol (mg/dl)", range(1, 1000, 1))
fbs = st.radio("Fasting Blood Sugar > 120 mg/dl", ["Yes", "No"])
thalach = st.selectbox("Max Heart Rate Achieved", range(1, 300, 1))
exang = st.selectbox("Exercise Induced Angina", ["Yes", "No"])
oldpeak = st.number_input("Oldpeak (ST depression)")
slope = st.selectbox("Heart Rate Slope", ["Upsloping: better heart rate with exercise(uncommon)", "Flatsloping: minimal change(typical healthy heart)", "Downsloping: signs of unhealthy heart"])
ca = st.selectbox("Number of Major Vessels Colored by Fluoroscopy", range(0, 5, 1))
thal = st.selectbox("Thalium Stress Test Result", range(1, 8, 1))

# Make prediction
if st.button("Predict"):
    prediction = preprocess(age, sex, cp, trestbps, restecg, chol, fbs, thalach, exang, oldpeak, slope, ca, thal)

    if prediction[0] == 0:
        st.error("Warning! You have a high risk of getting a heart attack!")
    else:
        st.success("You have a lower risk of getting heart disease!")

# Sidebar
st.sidebar.subheader("About App")
st.sidebar.info("This web app helps you determine whether you are at risk of developing heart disease.")
st.sidebar.info("Enter the required fields and click on 'Predict' to check your heart health status.")
st.sidebar.info("This is just a prediction tool, not a medical diagnosis. Please consult a doctor if symptoms persist.")

feedback = st.sidebar.slider("Rate this app", min_value=0, max_value=5, step=1)
if feedback:
    st.header("Thank you for your rating!")